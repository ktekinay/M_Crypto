#tag Class
Protected Class ScryptTests
Inherits TestGroup
	#tag Method, Flags = &h0
		Sub BlockMixTest()
		  dim inMB as MemoryBlock = DecodeHex( kBlockMixInHex )
		  dim expectedMB as MemoryBlock = DecodeHex( kBlockMixOutHex )
		  
		  dim s as new Scrypt_MTC.ScryptUnitTester
		  
		  dim outMB as MemoryBlock = s.BlockMix( inMB )
		  Assert.AreEqual expectedMB, outMB
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub HashTest()
		  dim actual as MemoryBlock 
		  dim expected as MemoryBlock 
		  
		  actual = Scrypt_MTC.Hash( "password", "NaCl", 10, 64, 8, 16 )
		  expected = DecodeHex( kScryptOutHex1 )
		  Assert.AreEqual expected, actual
		  
		  actual = Scrypt_MTC.Hash( "pleaseletmein", "SodiumChloride", 4, 64, 8, 1 )
		  expected = DecodeHex( kScryptOutHex2 )
		  Assert.AreEqual expected, actual
		  
		  actual = Scrypt_MTC.Hash( "pleaseletmein", "SodiumChloride" )
		  expected = DecodeHex( _
		  "c27638e3c1e7e185eb3ab5b9966fbe7dc0c0c86d106dbfe66f700e55394d1a9d69eafdf51f233d3c53a01b7b3e9b30635c524a81e166a1542cd376731918f466" )
		  Assert.AreEqual expected, actual
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ROMixTest()
		  dim inMB as MemoryBlock = DecodeHex( kROMixInHex )
		  dim expectedMB as MemoryBlock = DecodeHex( kROMixOutHex )
		  
		  dim s as new Scrypt_MTC.ScryptUnitTester
		  
		  dim outMB as MemoryBlock = s.ROMix( inMB, 16 )
		  Assert.AreEqual expectedMB, outMB
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SalsaTest()
		  // From the RFC:
		  // 
		  // Below is a sequence of octets that illustrate input and output values
		  // for the Salsa20/8 Core.  The octets are hex encoded and whitespace is
		  // inserted for readability.  The value corresponds to the first input
		  // and output pair generated by the first scrypt test vector below.
		  // 
		  // INPUT:
		  // 7e 87 9a 21 4f 3e c9 86 7c a9 40 e6 41 71 8f 26
		  // ba ee 55 5b 8c 61 c1 b5 0d f8 46 11 6d cd 3b 1d
		  // ee 24 f3 19 df 9b 3d 85 14 12 1e 4b 5a c5 aa 32
		  // 76 02 1d 29 09 c7 48 29 ed eb c6 8d b8 b8 c2 5e
		  // 
		  // OUTPUT:
		  // a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05
		  // 04 4b 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29
		  // b4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba
		  // e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81
		  //
		  
		  self.StopTestOnFail = true
		  
		  dim inHex as string = kSalsaInHex
		  dim inMB as MemoryBlock = DecodeHex( inHex )
		  
		  dim expectedHex as string = kSalsaOutHex
		  dim expectedMB as MemoryBlock = DecodeHex( expectedHex )
		  
		  dim s as new Scrypt_MTC.ScryptUnitTester
		  dim outMB as MemoryBlock = s.Salsa( inMB )
		  
		  Assert.AreEqual expectedMB, outMB, "MB"
		  
		End Sub
	#tag EndMethod


	#tag Constant, Name = kBlockMixInHex, Type = String, Dynamic = False, Default = \"f7 ce 0b 65 3d 2d 72 a4 10 8c f5 ab e9 12 ff dd\n77 76 16 db bb 27 a7 0e 82 04 f3 ae 2d 0f 6f ad\n89 f6 8f 48 11 d1 e8 7b cc 3b d7 40 0a 9f fd 29\n09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7\n89 49 91 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb\ncd 98 43 80 37 46 66 bb 8f fc b5 bf 40 c2 54 b0\n67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a 57 1b\n7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kBlockMixOutHex, Type = String, Dynamic = False, Default = \"a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05\n04 4b 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29\nb4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba\ne4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81\n20 ed c9 75 32 38 81 a8 05 40 f6 4c 16 2d cd 3c\n21 07 7c fe 5f 8d 5f e2 b1 a4 16 8f 95 36 78 b7\n7d 3b 3d 80 3b 60 e4 ab 92 09 96 e5 9b 4d 53 b6\n5d 2a 22 58 77 d5 ed f5 84 2c b9 f1 4e ef e4 25", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kROMixInHex, Type = String, Dynamic = False, Default = \"f7 ce 0b 65 3d 2d 72 a4 10 8c f5 ab e9 12 ff dd\n77 76 16 db bb 27 a7 0e 82 04 f3 ae 2d 0f 6f ad\n89 f6 8f 48 11 d1 e8 7b cc 3b d7 40 0a 9f fd 29\n09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7\n89 49 91 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb\ncd 98 43 80 37 46 66 bb 8f fc b5 bf 40 c2 54 b0\n67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a 57 1b\n7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kROMixOutHex, Type = String, Dynamic = False, Default = \"79 cc c1 93 62 9d eb ca 04 7f 0b 70 60 4b f6 b6\n2c e3 dd 4a 96 26 e3 55 fa fc 61 98 e6 ea 2b 46\nd5 84 13 67 3b 99 b0 29 d6 65 c3 57 60 1f b4 26\na0 b2 f4 bb a2 00 ee 9f 0a 43 d1 9b 57 1a 9c 71\nef 11 42 e6 5d 5a 26 6f dd ca 83 2c e5 9f aa 7c\nac 0b 9c f1 be 2b ff ca 30 0d 01 ee 38 76 19 c4\nae 12 fd 44 38 f2 03 a0 e4 e1 c4 7e c3 14 86 1f\n4e 90 87 cb 33 39 6a 68 73 e8 f9 d2 53 9a 4b 8e", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kSalsaInHex, Type = String, Dynamic = False, Default = \"7e 87 9a 21 4f 3e c9 86 7c a9 40 e6 41 71 8f 26\nba ee 55 5b 8c 61 c1 b5 0d f8 46 11 6d cd 3b 1d\nee 24 f3 19 df 9b 3d 85 14 12 1e 4b 5a c5 aa 32\n76 02 1d 29 09 c7 48 29 ed eb c6 8d b8 b8 c2 5e", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kSalsaOutHex, Type = String, Dynamic = False, Default = \" a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05\n 04 4b 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29\n b4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba\n e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kScryptOutHex1, Type = String, Dynamic = False, Default = \"fd ba be 1c 9d 34 72 00 78 56 e7 19 0d 01 e9 fe\n7c 6a d7 cb c8 23 78 30 e7 73 76 63 4b 37 31 62\n2e af 30 d9 2e 22 a3 88 6f f1 09 27 9d 98 30 da\nc7 27 af b9 4a 83 ee 6d 83 60 cb df a2 cc 06 40", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kScryptOutHex2, Type = String, Dynamic = False, Default = \"25 a9 fa 20 7f 87 ca 09\na4 ef 8b 9f 77 7a ca 16\nbe b7 84 ae 18 30 bf bf\nd3 83 25 aa bb 93 77 df\n1b a7 84 d7 46 ea 27 3b\nf5 16 a4 6f bf ac f5 11\nc5 be ba 4c 4a b3 ac c7\nfa 6f 46 0b 6c 0f 47 7b", Scope = Private
	#tag EndConstant


	#tag ViewBehavior
		#tag ViewProperty
			Name="Duration"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Double"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="FailedTestCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="IncludeGroup"
			Visible=false
			Group="Behavior"
			InitialValue="True"
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="IsRunning"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="NotImplementedCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="PassedTestCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="RunTestCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="SkippedTestCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="StopTestOnFail"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="TestCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
